{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "authorship_tag": "ABX9TyNU+W1BWjuWYuf+8VcLDDKF",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ShapatinAA/smgmo/blob/main/5%20lab%20mnist\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "iXytU2usLlVP",
        "outputId": "75e014e4-56c2-4676-a385-c581bbf48c1b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Using device: cuda\n",
            "Files already downloaded and verified\n",
            "Files already downloaded and verified\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": []
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy with learning rate 0.001: 0.6617\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": []
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy with learning rate 0.01: 0.4976\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": []
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy with batch size 64: 0.6717\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": []
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy with batch size 128: 0.6125\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": []
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy with convolution kernel size 3: 0.6732\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": []
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy with convolution kernel size 5: 0.6784\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Epoch 1/5:   0%|          | 0/782 [00:00<?, ?it/s]/usr/local/lib/python3.10/dist-packages/torch/autograd/graph.py:744: UserWarning: Plan failed with a cudnnException: CUDNN_BACKEND_EXECUTION_PLAN_DESCRIPTOR: cudnnFinalize Descriptor Failed cudnn_status: CUDNN_STATUS_NOT_SUPPORTED (Triggered internally at ../aten/src/ATen/native/cudnn/Conv_v8.cpp:919.)\n",
            "  return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy with convolution kernel size 7: 0.6605\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/torch/nn/init.py:452: UserWarning: Initializing zero-element tensors is a no-op\n",
            "  warnings.warn(\"Initializing zero-element tensors is a no-op\")\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy with convolution stride 1: 0.6675\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\rEpoch 1/5:   0%|          | 0/782 [00:00<?, ?it/s]/usr/local/lib/python3.10/dist-packages/torch/nn/modules/conv.py:456: UserWarning: Plan failed with a cudnnException: CUDNN_BACKEND_EXECUTION_PLAN_DESCRIPTOR: cudnnFinalize Descriptor Failed cudnn_status: CUDNN_STATUS_NOT_SUPPORTED (Triggered internally at ../aten/src/ATen/native/cudnn/Conv_v8.cpp:919.)\n",
            "  return F.conv2d(input, weight, bias, self.stride,\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "RuntimeError",
          "evalue": "Given input size: (16x1x1). Calculated output size: (16x0x0). Output size is too small",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-5-802dce2ba8d8>\u001b[0m in \u001b[0;36m<cell line: 213>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    227\u001b[0m     \u001b[0moptimizer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0moptim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mAdam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minitial_hyperparams\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'learning_rate'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    228\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 229\u001b[0;31m     \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_and_evaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_loader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_loader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptimizer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minitial_hyperparams\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'num_epochs'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    230\u001b[0m     \u001b[0maccuracy_scores\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maccuracy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    231\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'Accuracy with convolution stride {conv_stride}: {accuracy}'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-5-802dce2ba8d8>\u001b[0m in \u001b[0;36mtrain_and_evaluate\u001b[0;34m(model, train_loader, test_loader, criterion, optimizer, num_epochs)\u001b[0m\n\u001b[1;32m    103\u001b[0m             \u001b[0mimages\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimages\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    104\u001b[0m             \u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzero_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 105\u001b[0;31m             \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimages\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    106\u001b[0m             \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    107\u001b[0m             \u001b[0mloss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1530\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compiled_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1531\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1532\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1533\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1534\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1539\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1540\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1541\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1542\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1543\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-5-802dce2ba8d8>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m     90\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     91\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 92\u001b[0;31m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconv_layers\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     93\u001b[0m         \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     94\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1530\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compiled_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1531\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1532\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1533\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1534\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1539\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1540\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1541\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1542\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1543\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/container.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    215\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    216\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mmodule\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 217\u001b[0;31m             \u001b[0minput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodule\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    218\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1530\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compiled_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1531\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1532\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1533\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1534\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1539\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1540\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1541\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1542\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1543\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/pooling.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input)\u001b[0m\n\u001b[1;32m    162\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    163\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 164\u001b[0;31m         return F.max_pool2d(input, self.kernel_size, self.stride,\n\u001b[0m\u001b[1;32m    165\u001b[0m                             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpadding\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdilation\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mceil_mode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mceil_mode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    166\u001b[0m                             return_indices=self.return_indices)\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/_jit_internal.py\u001b[0m in \u001b[0;36mfn\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    495\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mif_true\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    496\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 497\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mif_false\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    498\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    499\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mif_true\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__doc__\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mif_false\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__doc__\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/functional.py\u001b[0m in \u001b[0;36m_max_pool2d\u001b[0;34m(input, kernel_size, stride, padding, dilation, ceil_mode, return_indices)\u001b[0m\n\u001b[1;32m    794\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mstride\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    795\u001b[0m         \u001b[0mstride\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjit\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mannotate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mList\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 796\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax_pool2d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkernel_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstride\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpadding\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdilation\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mceil_mode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    797\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    798\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mRuntimeError\u001b[0m: Given input size: (16x1x1). Calculated output size: (16x0x0). Output size is too small"
          ]
        }
      ],
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "import torchvision\n",
        "import torchvision.transforms as transforms\n",
        "from torch.utils.data import DataLoader\n",
        "from sklearn.metrics import precision_score\n",
        "\n",
        "# Hyperparameters\n",
        "learning_rate = 0.001\n",
        "num_epochs = 50\n",
        "batch_size = 64\n",
        "block_type = 'b'  # Choose 'a' or 'b'\n",
        "conv_filter_size = 3\n",
        "conv_filter_stride = 1\n",
        "pooling_window_size = 2\n",
        "pooling_window_stride = 2\n",
        "\n",
        "# Dataset and DataLoader\n",
        "transform = transforms.Compose([\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize((0.5,), (0.5,))\n",
        "])\n",
        "\n",
        "train_dataset = torchvision.datasets.CIFAR10(root='./data', train=True, download=True, transform=transform)\n",
        "test_dataset = torchvision.datasets.CIFAR10(root='./data', train=False, download=True, transform=transform)\n",
        "\n",
        "train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n",
        "test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)\n",
        "\n",
        "# Define the Model\n",
        "class CNN(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(CNN, self).__init__()\n",
        "\n",
        "        self.block_type = block_type\n",
        "\n",
        "        if self.block_type == 'a':\n",
        "            self.conv_block = nn.Sequential(\n",
        "                nn.Conv2d(in_channels=3, out_channels=32, kernel_size=conv_filter_size, stride=conv_filter_stride),\n",
        "                nn.ReLU(),\n",
        "                nn.MaxPool2d(kernel_size=pooling_window_size, stride=pooling_window_stride)\n",
        "            )\n",
        "        elif self.block_type == 'b':\n",
        "            self.conv_block = nn.Sequential(\n",
        "                nn.Conv2d(in_channels=3, out_channels=32, kernel_size=conv_filter_size, stride=conv_filter_stride),\n",
        "                nn.ReLU(),\n",
        "                nn.Conv2d(in_channels=32, out_channels=64, kernel_size=conv_filter_size, stride=conv_filter_stride),\n",
        "                nn.ReLU(),\n",
        "                nn.MaxPool2d(kernel_size=pooling_window_size, stride=pooling_window_stride)\n",
        "            )\n",
        "\n",
        "        self.fc = nn.Sequential(\n",
        "            nn.Flatten(),\n",
        "            nn.Linear(64 * 6 * 6, 1000),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(1000, 10)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.conv_block(x)\n",
        "        x = self.fc(x)\n",
        "        return x\n",
        "\n",
        "model = CNN()\n",
        "criterion = nn.CrossEntropyLoss()\n",
        "optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n",
        "\n",
        "# Training Loop\n",
        "def train(model, train_loader, criterion, optimizer, num_epochs):\n",
        "    for epoch in range(num_epochs):\n",
        "        model.train()\n",
        "        running_loss = 0.0\n",
        "        for images, labels in train_loader:\n",
        "            optimizer.zero_grad()\n",
        "            outputs = model(images)\n",
        "            loss = criterion(outputs, labels)\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "            running_loss += loss.item()\n",
        "\n",
        "        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {running_loss/len(train_loader):.4f}')\n",
        "\n",
        "# Evaluation Function\n",
        "def evaluate(model, test_loader):\n",
        "    model.eval()\n",
        "    all_preds = []\n",
        "    all_labels = []\n",
        "    with torch.no_grad():\n",
        "        for images, labels in test_loader:\n",
        "            outputs = model(images)\n",
        "            _, preds = torch.max(outputs, 1)\n",
        "            all_preds.extend(preds.cpu().numpy())\n",
        "            all_labels.extend(labels.cpu().numpy())\n",
        "\n",
        "    precision = precision_score(all_labels, all_preds, average='macro')\n",
        "    return precision\n",
        "\n",
        "# Main Script\n",
        "if __name__ == '__main__':\n",
        "    train(model, train_loader, criterion, optimizer, num_epochs)\n",
        "    precision = evaluate(model, test_loader)\n",
        "    print(f'Precision: {precision:.4f}')\n",
        "\n",
        "    if precision >= 0.90:\n",
        "        print(\"Achieved target precision of 90% or more.\")\n",
        "    else:\n",
        "        print(\"Did not achieve target precision. Consider further tuning of hyperparameters or training for more epochs.\")\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "import torchvision\n",
        "import torchvision.transforms as transforms\n",
        "from torch.utils.data import DataLoader\n",
        "from sklearn.metrics import precision_score, accuracy_score\n",
        "from sklearn.exceptions import UndefinedMetricWarning\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from tqdm import tqdm\n",
        "import warnings\n",
        "\n",
        "# Check if GPU is available\n",
        "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
        "print(f\"Using device: {device}\")\n",
        "\n",
        "# Initial hyperparameters\n",
        "initial_hyperparams = {\n",
        "    'learning_rate': 0.001,\n",
        "    'batch_size': 32,\n",
        "    'conv_kernel_size': 5,\n",
        "    'conv_stride': 1,\n",
        "    'pool_kernel_size': 2,\n",
        "    'pool_stride': 2,\n",
        "    'num_epochs': 10\n",
        "}\n",
        "\n",
        "# Hyperparameters to iterate over\n",
        "learning_rates = [0.001, 0.003, 0.01, 0.03, 0.1, 0.3]\n",
        "batch_sizes = [16, 32, 64, 128]\n",
        "conv_kernel_sizes = [3, 5, 7, 9, 11]\n",
        "conv_strides = [1, 2, 3]\n",
        "pool_kernel_sizes = [2, 3, 5, 7, 9]\n",
        "pool_strides = [1, 2, 3]\n",
        "num_epochs_list = [5, 10]\n",
        "\n",
        "# Dataset and DataLoader\n",
        "transform = transforms.Compose([\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize((0.5,), (0.5,))\n",
        "])\n",
        "\n",
        "train_dataset = torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform)\n",
        "test_dataset = torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transform)\n",
        "\n",
        "# Preprocessing the data\n",
        "full_train_x, full_train_y = train_dataset.data, train_dataset.targets\n",
        "full_test_x, full_test_y = test_dataset.data, test_dataset.targets\n",
        "\n",
        "digit_labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "train_ind = [i for i, label in enumerate(full_train_y) if label in digit_labels]\n",
        "test_ind = [i for i, label in enumerate(full_test_y) if label in digit_labels]\n",
        "\n",
        "train_x, dig_train_y = full_train_x[train_ind], full_train_y[train_ind]\n",
        "test_x, dig_test_y = full_test_x[test_ind], full_test_y[test_ind]\n",
        "\n",
        "# Convert the data to the correct format\n",
        "train_x = train_x.float().unsqueeze(1) / 255.0\n",
        "test_x = test_x.float().unsqueeze(1) / 255.0\n",
        "\n",
        "# Print tensor sizes\n",
        "print(f'Size of train_x: {train_x.shape}')\n",
        "print(f'Size of test_x: {test_x.shape}')\n",
        "\n",
        "# Define the simplified CNN Model\n",
        "class CNN(nn.Module):\n",
        "    def __init__(self, num_of_blocks, stride_conv, stride_pool, kernel_conv_size, kernel_pool_size, out_channels=6, in_channels=1):\n",
        "        super(CNN, self).__init__()\n",
        "        layers = [\n",
        "            nn.Conv2d(in_channels, out_channels, kernel_conv_size, stride=stride_conv, padding=(kernel_conv_size - 1) // 2),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(kernel_pool_size, stride=stride_pool)\n",
        "        ]\n",
        "\n",
        "        for _ in range(num_of_blocks - 1):\n",
        "            layers.extend([\n",
        "                nn.Conv2d(out_channels, out_channels, kernel_conv_size, stride=stride_conv, padding=(kernel_conv_size - 1) // 2),\n",
        "                nn.ReLU(),\n",
        "                nn.MaxPool2d(kernel_pool_size, stride=stride_pool)\n",
        "            ])\n",
        "\n",
        "        layers.append(nn.Flatten())\n",
        "\n",
        "        self.model = nn.Sequential(*layers)\n",
        "\n",
        "        with torch.no_grad():\n",
        "            sample_input = torch.zeros(1, in_channels, 28, 28)\n",
        "            sample_output = self.model(sample_input)\n",
        "            linear_input_dim = sample_output.shape[1]\n",
        "\n",
        "        self.fc = nn.Sequential(\n",
        "            nn.Linear(linear_input_dim, 120),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(120, 84),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(84, 10)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.model(x)\n",
        "        x = self.fc(x)\n",
        "        return x\n",
        "\n",
        "    def fit(self, X, Y, epochs, lr, batch_size=100, logs=True):\n",
        "        criterion = nn.CrossEntropyLoss()\n",
        "        optimizer = torch.optim.SGD(self.parameters(), lr=lr)\n",
        "        for epoch in range(epochs):\n",
        "            indices = np.random.permutation(X.shape[0])\n",
        "            X, Y = X[indices], Y[indices]\n",
        "            for i in range(X.shape[0] // batch_size):\n",
        "                x, y = X[i * batch_size:(i + 1) * batch_size], Y[i * batch_size:(i + 1) * batch_size]\n",
        "                optimizer.zero_grad()\n",
        "                pred = self(x.to(device))\n",
        "                loss = criterion(pred, y.to(device))\n",
        "                loss.backward()\n",
        "                optimizer.step()\n",
        "            if logs:\n",
        "                print(f'Epoch {epoch + 1}/{epochs}, Loss: {loss.item()}')\n",
        "\n",
        "    def predict(self, X):\n",
        "        with torch.no_grad():\n",
        "            return self(X.to(device)).argmax(dim=1)\n",
        "\n",
        "def train_and_evaluate(model, train_loader, test_loader, criterion, optimizer, num_epochs):\n",
        "    # Training\n",
        "    for epoch in range(num_epochs):\n",
        "        model.train()\n",
        "        running_loss = 0.0\n",
        "        progress_bar = tqdm(train_loader, desc=f'Epoch {epoch+1}/{num_epochs}', leave=False)\n",
        "        for images, labels in progress_bar:\n",
        "            images, labels = images.to(device), labels.to(device)\n",
        "            optimizer.zero_grad()\n",
        "            outputs = model(images)\n",
        "            loss = criterion(outputs, labels)\n",
        "            loss.backward()\n",
        "            optimizer.step()\n",
        "            running_loss += loss.item()\n",
        "            progress_bar.set_postfix(loss=running_loss/len(train_loader))\n",
        "\n",
        "    # Evaluation\n",
        "    model.eval()\n",
        "    all_preds = []\n",
        "    all_labels = []\n",
        "    with torch.no_grad():\n",
        "        for images, labels in tqdm(test_loader, desc='Evaluating', leave=False):\n",
        "            images, labels = images.to(device), labels.to(device)\n",
        "            outputs = model(images)\n",
        "            _, preds = torch.max(outputs, 1)\n",
        "            all_preds.extend(preds.cpu().numpy())\n",
        "            all_labels.extend(labels.cpu().numpy())\n",
        "\n",
        "    precision = precision_score(all_labels, all_preds, average='macro')\n",
        "    accuracy = accuracy_score(all_labels, all_preds)\n",
        "    return precision, accuracy\n",
        "\n",
        "def plot_results(hyperparameter, values, scores):\n",
        "    plt.plot(values, scores)\n",
        "    plt.xlabel(hyperparameter.replace('_', ' ').capitalize())\n",
        "    plt.ylabel('Accuracy')\n",
        "    plt.title(f'Accuracy vs {hyperparameter.replace(\"_\", \" \").capitalize()}')\n",
        "    plt.show()\n",
        "\n",
        "# DataLoader for the modified dataset\n",
        "train_loader = DataLoader(list(zip(train_x, dig_train_y)), batch_size=initial_hyperparams['batch_size'], shuffle=True)\n",
        "test_loader = DataLoader(list(zip(test_x, dig_test_y)), batch_size=initial_hyperparams['batch_size'], shuffle=False)\n",
        "\n",
        "# Track the best hyperparameters\n",
        "best_hyperparams = initial_hyperparams.copy()\n",
        "best_accuracy = 0\n",
        "\n",
        "# Iterate over each hyperparameter independently and plot results\n",
        "\n",
        "# Iterate over learning rates\n",
        "accuracy_scores = []\n",
        "for lr in learning_rates:\n",
        "    model = CNN(\n",
        "        num_of_blocks=2,\n",
        "        stride_conv=initial_hyperparams['conv_stride'],\n",
        "        stride_pool=initial_hyperparams['pool_stride'],\n",
        "        kernel_conv_size=initial_hyperparams['conv_kernel_size'],\n",
        "        kernel_pool_size=initial_hyperparams['pool_kernel_size']\n",
        "    ).to(device)\n",
        "\n",
        "    criterion = nn.CrossEntropyLoss()\n",
        "    optimizer = optim.Adam(model.parameters(), lr=lr)\n",
        "\n",
        "    _, accuracy = train_and_evaluate(model, train_loader, test_loader, criterion, optimizer, initial_hyperparams['num_epochs'])\n",
        "    accuracy_scores.append(accuracy)\n",
        "    print(f'Accuracy with learning rate {lr}: {accuracy}')\n",
        "\n",
        "    if accuracy > best_accuracy:\n",
        "        best_accuracy = accuracy\n",
        "        best_hyperparams['learning_rate'] = lr\n",
        "\n",
        "plot_results('learning_rate', learning_rates, accuracy_scores)\n",
        "\n",
        "# Update initial hyperparams with the best learning rate\n",
        "initial_hyperparams['learning_rate'] = best_hyperparams['learning_rate']\n",
        "\n",
        "# Iterate over batch sizes\n",
        "accuracy_scores = []\n",
        "for batch_size in batch_sizes:\n",
        "    train_loader = DataLoader(list(zip(train_x, dig_train_y)), batch_size=batch_size, shuffle=True)\n",
        "    test_loader = DataLoader(list(zip(test_x, dig_test_y)), batch_size=batch_size, shuffle=False)\n",
        "\n",
        "    model = CNN(\n",
        "        num_of_blocks=2,\n",
        "        stride_conv=initial_hyperparams['conv_stride'],\n",
        "        stride_pool=initial_hyperparams['pool_stride'],\n",
        "        kernel_conv_size=initial_hyperparams['conv_kernel_size'],\n",
        "        kernel_pool_size=initial_hyperparams['pool_kernel_size']\n",
        "    ).to(device)\n",
        "\n",
        "    criterion = nn.CrossEntropyLoss()\n",
        "    optimizer = optim.Adam(model.parameters(), lr=initial_hyperparams['learning_rate'])\n",
        "\n",
        "    _, accuracy = train_and_evaluate(model, train_loader, test_loader, criterion, optimizer, initial_hyperparams['num_epochs'])\n",
        "    accuracy_scores.append(accuracy)\n",
        "    print(f'Accuracy with batch size {batch_size}: {accuracy}')\n",
        "\n",
        "    if accuracy > best_accuracy:\n",
        "        best_accuracy = accuracy\n",
        "        best_hyperparams['batch_size'] = batch_size\n",
        "\n",
        "plot_results('batch_size', batch_sizes, accuracy_scores)\n",
        "\n",
        "# Update initial hyperparams with the best batch size\n",
        "initial_hyperparams['batch_size'] = best_hyperparams['batch_size']\n",
        "\n",
        "# Iterate over convolution kernel sizes\n",
        "accuracy_scores = []\n",
        "for conv_kernel_size in conv_kernel_sizes:\n",
        "    model = CNN(\n",
        "        num_of_blocks=2,\n",
        "        stride_conv=initial_hyperparams['conv_stride'],\n",
        "        stride_pool=initial_hyperparams['pool_stride'],\n",
        "        kernel_conv_size=conv_kernel_size,\n",
        "        kernel_pool_size=initial_hyperparams['pool_kernel_size']\n",
        "    ).to(device)\n",
        "\n",
        "    criterion = nn.CrossEntropyLoss()\n",
        "    optimizer = optim.Adam(model.parameters(), lr=initial_hyperparams['learning_rate'])\n",
        "\n",
        "    _, accuracy = train_and_evaluate(model, train_loader, test_loader, criterion, optimizer, initial_hyperparams['num_epochs'])\n",
        "    accuracy_scores.append(accuracy)\n",
        "    print(f'Accuracy with convolution kernel size {conv_kernel_size}: {accuracy}')\n",
        "\n",
        "    if accuracy > best_accuracy:\n",
        "        best_accuracy = accuracy\n",
        "        best_hyperparams['conv_kernel_size'] = conv_kernel_size\n",
        "\n",
        "plot_results('conv_kernel_size', conv_kernel_sizes, accuracy_scores)\n",
        "\n",
        "# Update initial hyperparams with the best conv kernel size\n",
        "initial_hyperparams['conv_kernel_size'] = best_hyperparams['conv_kernel_size']\n",
        "\n",
        "# Iterate over convolution strides\n",
        "accuracy_scores = []\n",
        "for conv_stride in conv_strides:\n",
        "    model = CNN(\n",
        "        num_of_blocks=2,\n",
        "        stride_conv=conv_stride,\n",
        "        stride_pool=initial_hyperparams['pool_stride'],\n",
        "        kernel_conv_size=initial_hyperparams['conv_kernel_size'],\n",
        "        kernel_pool_size=initial_hyperparams['pool_kernel_size']\n",
        "    ).to(device)\n",
        "\n",
        "    criterion = nn.CrossEntropyLoss()\n",
        "    optimizer = optim.Adam(model.parameters(), lr=initial_hyperparams['learning_rate'])\n",
        "\n",
        "    _, accuracy = train_and_evaluate(model, train_loader, test_loader, criterion, optimizer, initial_hyperparams['num_epochs'])\n",
        "    accuracy_scores.append(accuracy)\n",
        "    print(f'Accuracy with convolution stride {conv_stride}: {accuracy}')\n",
        "\n",
        "    if accuracy > best_accuracy:\n",
        "        best_accuracy = accuracy\n",
        "        best_hyperparams['conv_stride'] = conv_stride\n",
        "\n",
        "plot_results('conv_stride', conv_strides, accuracy_scores)\n",
        "\n",
        "# Update initial hyperparams with the best conv stride\n",
        "initial_hyperparams['conv_stride'] = best_hyperparams['conv_stride']\n",
        "\n",
        "# Iterate over pooling kernel sizes\n",
        "accuracy_scores = []\n",
        "for pool_kernel_size in pool_kernel_sizes:\n",
        "    model = CNN(\n",
        "        num_of_blocks=2,\n",
        "        stride_conv=initial_hyperparams['conv_stride'],\n",
        "        stride_pool=initial_hyperparams['pool_stride'],\n",
        "        kernel_conv_size=initial_hyperparams['conv_kernel_size'],\n",
        "        kernel_pool_size=pool_kernel_size\n",
        "    ).to(device)\n",
        "\n",
        "    criterion = nn.CrossEntropyLoss()\n",
        "    optimizer = optim.Adam(model.parameters(), lr=initial_hyperparams['learning_rate'])\n",
        "\n",
        "    _, accuracy = train_and_evaluate(model, train_loader, test_loader, criterion, optimizer, initial_hyperparams['num_epochs'])\n",
        "    accuracy_scores.append(accuracy)\n",
        "    print(f'Accuracy with pooling kernel size {pool_kernel_size}: {accuracy}')\n",
        "\n",
        "    if accuracy > best_accuracy:\n",
        "        best_accuracy = accuracy\n",
        "        best_hyperparams['pool_kernel_size'] = pool_kernel_size\n",
        "\n",
        "plot_results('pool_kernel_size', pool_kernel_sizes, accuracy_scores)\n",
        "\n",
        "# Update initial hyperparams with the best pool kernel size\n",
        "initial_hyperparams['pool_kernel_size'] = best_hyperparams['pool_kernel_size']\n",
        "\n",
        "# Iterate over pooling strides\n",
        "accuracy_scores = []\n",
        "for pool_stride in pool_strides:\n",
        "    model = CNN(\n",
        "        num_of_blocks=2,\n",
        "        stride_conv=initial_hyperparams['conv_stride'],\n",
        "        stride_pool=pool_stride,\n",
        "        kernel_conv_size=initial_hyperparams['conv_kernel_size'],\n",
        "        kernel_pool_size=initial_hyperparams['pool_kernel_size']\n",
        "    ).to(device)\n",
        "\n",
        "    criterion = nn.CrossEntropyLoss()\n",
        "    optimizer = optim.Adam(model.parameters(), lr=initial_hyperparams['learning_rate'])\n",
        "\n",
        "    _, accuracy = train_and_evaluate(model, train_loader, test_loader, criterion, optimizer, initial_hyperparams['num_epochs'])\n",
        "    accuracy_scores.append(accuracy)\n",
        "    print(f'Accuracy with pooling stride {pool_stride}: {accuracy}')\n",
        "\n",
        "    if accuracy > best_accuracy:\n",
        "        best_accuracy = accuracy\n",
        "        best_hyperparams['pool_stride'] = pool_stride\n",
        "\n",
        "plot_results('pool_stride', pool_strides, accuracy_scores)\n",
        "\n",
        "# Update initial hyperparams with the best pool stride\n",
        "initial_hyperparams['pool_stride'] = best_hyperparams['pool_stride']\n",
        "\n",
        "# Iterate over number of epochs\n",
        "accuracy_scores = []\n",
        "for num_epochs in num_epochs_list:\n",
        "    model = CNN(\n",
        "        num_of_blocks=2,\n",
        "        stride_conv=initial_hyperparams['conv_stride'],\n",
        "        stride_pool=initial_hyperparams['pool_stride'],\n",
        "        kernel_conv_size=initial_hyperparams['conv_kernel_size'],\n",
        "        kernel_pool_size=initial_hyperparams['pool_kernel_size']\n",
        "    ).to(device)\n",
        "\n",
        "    criterion = nn.CrossEntropyLoss()\n",
        "    optimizer = optim.Adam(model.parameters(), lr=initial_hyperparams['learning_rate'])\n",
        "\n",
        "    _, accuracy = train_and_evaluate(model, train_loader, test_loader, criterion, optimizer, num_epochs)\n",
        "    accuracy_scores.append(accuracy)\n",
        "    print(f'Accuracy with number of epochs {num_epochs}: {accuracy}')\n",
        "\n",
        "    if accuracy > best_accuracy:\n",
        "        best_accuracy = accuracy\n",
        "        best_hyperparams['num_epochs'] = num_epochs\n",
        "\n",
        "plot_results('num_epochs', num_epochs_list, accuracy_scores)\n",
        "\n",
        "# Update initial hyperparams with the best number of epochs\n",
        "initial_hyperparams['num_epochs'] = best_hyperparams['num_epochs']\n",
        "\n",
        "# Function to display an image and its prediction\n",
        "def imshow(img, title):\n",
        "    img = img / 2 + 0.5  # unnormalize\n",
        "    npimg = img.numpy()\n",
        "    plt.imshow(np.transpose(npimg, (1, 2, 0)), cmap='gray')\n",
        "    plt.title(title)\n",
        "    plt.show()\n",
        "\n",
        "# Display 10 test images and their predictions\n",
        "dataiter = iter(test_loader)\n",
        "images, labels = next(dataiter)\n",
        "images, labels = images.to(device), labels.to(device)\n",
        "\n",
        "outputs = model(images)\n",
        "_, predicted = torch.max(outputs, 1)\n",
        "\n",
        "imshow(torchvision.utils.make_grid(images[:10].cpu()), f'Predicted: {predicted[:10].cpu().numpy()}, True: {labels[:10].cpu().numpy()}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "I1HHFGRqH36a",
        "outputId": "60d680f0-32e9-4283-e004-3eb01abc98e8"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Using device: cuda\n",
            "Size of train_x: torch.Size([60000, 1, 28, 28])\n",
            "Size of test_x: torch.Size([10000, 1, 28, 28])\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": []
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy with learning rate 0.001: 0.9862\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": []
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy with learning rate 0.003: 0.9883\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": []
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy with learning rate 0.01: 0.969\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy with learning rate 0.03: 0.101\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy with learning rate 0.1: 0.101\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy with learning rate 0.3: 0.1135\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": []
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-3-b32f0a57292b>\u001b[0m in \u001b[0;36m<cell line: 203>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    216\u001b[0m     \u001b[0moptimizer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0moptim\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mAdam\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minitial_hyperparams\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'learning_rate'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    217\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 218\u001b[0;31m     \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrain_and_evaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_loader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_loader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptimizer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minitial_hyperparams\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'num_epochs'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    219\u001b[0m     \u001b[0maccuracy_scores\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maccuracy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    220\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'Accuracy with batch size {batch_size}: {accuracy}'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-3-b32f0a57292b>\u001b[0m in \u001b[0;36mtrain_and_evaluate\u001b[0;34m(model, train_loader, test_loader, criterion, optimizer, num_epochs)\u001b[0m\n\u001b[1;32m    133\u001b[0m             \u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mzero_grad\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    134\u001b[0m             \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimages\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 135\u001b[0;31m             \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcriterion\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    136\u001b[0m             \u001b[0mloss\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    137\u001b[0m             \u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_wrapped_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1530\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_compiled_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[misc]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1531\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1532\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1533\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1534\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_call_impl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py\u001b[0m in \u001b[0;36m_call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1539\u001b[0m                 \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_pre_hooks\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_global_backward_hooks\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1540\u001b[0m                 or _global_forward_hooks or _global_forward_pre_hooks):\n\u001b[0;32m-> 1541\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mforward_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1542\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1543\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/modules/loss.py\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, input, target)\u001b[0m\n\u001b[1;32m   1183\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1184\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mTensor\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1185\u001b[0;31m         return F.cross_entropy(input, target, weight=self.weight,\n\u001b[0m\u001b[1;32m   1186\u001b[0m                                \u001b[0mignore_index\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mignore_index\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreduction\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreduction\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1187\u001b[0m                                label_smoothing=self.label_smoothing)\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/torch/nn/functional.py\u001b[0m in \u001b[0;36mcross_entropy\u001b[0;34m(input, target, weight, size_average, ignore_index, reduce, reduction, label_smoothing)\u001b[0m\n\u001b[1;32m   3084\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0msize_average\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mreduce\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3085\u001b[0m         \u001b[0mreduction\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_Reduction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegacy_get_string\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msize_average\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreduce\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3086\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_C\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_nn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcross_entropy_loss\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mweight\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_Reduction\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_enum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreduction\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mignore_index\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel_smoothing\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3087\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3088\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import torchvision\n",
        "import torchvision.transforms as trnsfrms\n",
        "import torch\n",
        "import numpy as np\n",
        "\n",
        "train_dataset =  torchvision.datasets.mnist.MNIST(root='data', download=True, train=True, transform=trnsfrms.ToTensor())\n",
        "test_dataset = torchvision.datasets.mnist.MNIST(root='data', train=False, transform=trnsfrms.ToTensor())\n",
        "\n",
        "print(train_dataset)\n",
        "print(test_dataset)\n",
        "\n",
        "full_train_x, full_train_y = train_dataset.data, train_dataset.targets\n",
        "full_test_x, full_test_y = test_dataset.data, test_dataset.targets\n",
        "\n",
        "digit_labels = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "train_ind = [i for i, label in enumerate(full_train_y) if label in digit_labels]\n",
        "test_ind = [i for i, label in enumerate(full_test_y) if label in digit_labels]\n",
        "\n",
        "train_x, dig_train_y = full_train_x[train_ind], full_train_y[train_ind]\n",
        "test_x, dig_test_y = full_test_x[test_ind], full_test_y[test_ind]\n",
        "\n",
        "# Преобразуем данные в формат [batch_size, 1, 28, 28]\n",
        "train_x = train_x.float().unsqueeze(1) / 255.0\n",
        "test_x = test_x.float().unsqueeze(1) / 255.0\n",
        "\n",
        "# Вывод размеров тензоров\n",
        "print(f'Size of train_x: {train_x.shape}')\n",
        "print(f'Size of test_x: {test_x.shape}')\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i52BhgcWNJDA",
        "outputId": "a22b5832-ea74-42cb-facb-ef72e9bc87b2"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Dataset MNIST\n",
            "    Number of datapoints: 60000\n",
            "    Root location: data\n",
            "    Split: Train\n",
            "    StandardTransform\n",
            "Transform: ToTensor()\n",
            "Dataset MNIST\n",
            "    Number of datapoints: 10000\n",
            "    Root location: data\n",
            "    Split: Test\n",
            "    StandardTransform\n",
            "Transform: ToTensor()\n",
            "Size of train_x: torch.Size([60000, 1, 28, 28])\n",
            "Size of test_x: torch.Size([10000, 1, 28, 28])\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import PIL.ImageOps\n",
        "import torch.nn as nn\n",
        "from torchvision.transforms import ToPILImage\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "class Flatten(nn.Module):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "\n",
        "    def forward(self, x: torch.Tensor):\n",
        "        return x.view(x.size(0), -1)\n",
        "\n",
        "class CNN(nn.Module):\n",
        "    def __init__(self, num_of_blocks, stride_conv, stride_pool, kernel_conv_size, kernel_pool_size, out_channels=6, in_channels=1):\n",
        "        super(CNN, self).__init__()\n",
        "        layers = [\n",
        "            nn.Conv2d(in_channels, out_channels, kernel_conv_size, stride=stride_conv),\n",
        "            nn.ReLU(),\n",
        "            nn.MaxPool2d(kernel_pool_size, stride=stride_pool)\n",
        "        ]\n",
        "\n",
        "        for _ in range(num_of_blocks - 1):\n",
        "            layers.extend([\n",
        "                nn.Conv2d(out_channels, out_channels, kernel_conv_size, stride=stride_conv),\n",
        "                nn.ReLU(),\n",
        "                nn.MaxPool2d(kernel_pool_size, stride=stride_pool)\n",
        "            ])\n",
        "\n",
        "        layers.append(nn.Flatten())\n",
        "\n",
        "        self.model = nn.Sequential(*layers)\n",
        "\n",
        "        with torch.no_grad():\n",
        "            sample_input = torch.zeros(out_channels, in_channels, 28, 28)\n",
        "            sample_output = self.model(sample_input)\n",
        "            linear_input_dim = sample_output.shape[1]\n",
        "\n",
        "        self.fc = nn.Sequential(\n",
        "            nn.Linear(linear_input_dim, 120),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(120, 84),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(84, 10)\n",
        "        )\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = self.model(x)\n",
        "        x = self.fc(x)\n",
        "        return x\n",
        "\n",
        "    def fit(self, X, Y, epochs, lr, batch_size=100, logs=True):\n",
        "        criterion = nn.CrossEntropyLoss()\n",
        "        optimizer = torch.optim.SGD(self.parameters(), lr=lr)\n",
        "        for epoch in range(epochs):\n",
        "            indices = np.random.permutation(X.shape[0])\n",
        "            X, Y = X[indices], Y[indices]\n",
        "            for i in range(X.shape[0] // batch_size):\n",
        "                x, y = X[i * batch_size:(i + 1) * batch_size], Y[i * batch_size:(i + 1) * batch_size]\n",
        "                optimizer.zero_grad()\n",
        "                pred = self(x)\n",
        "                loss = criterion(pred, y)\n",
        "                loss.backward()\n",
        "                optimizer.step()\n",
        "            if logs:\n",
        "                print(f'Epoch {epoch + 1}/{epochs}, Loss: {loss.item()}')\n",
        "\n",
        "    def predict(self, X):\n",
        "        with torch.no_grad():\n",
        "            return self(X).argmax(dim=1)"
      ],
      "metadata": {
        "id": "kAqGuRSQNX0h"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lrs = [0.3, 0.1, 0.03, 0.01, 0.003, 0.001, 0.0001, 0.00001]\n",
        "accuracy_scores = []\n",
        "\n",
        "for lr in lrs:\n",
        "    model = CNN(num_of_blocks=1, stride_conv=1, stride_pool=2, kernel_conv_size=5, kernel_pool_size=2, out_channels=6, in_channels=1)\n",
        "    model.fit(train_x, dig_train_y, epochs=10, lr=lr, batch_size=32)\n",
        "    with torch.no_grad():\n",
        "        pred = model.predict(test_x).numpy()\n",
        "        test_y_labels = dig_test_y.numpy()\n",
        "\n",
        "        accuracy = accuracy_score(test_y_labels, pred)\n",
        "        accuracy_scores.append(accuracy)\n",
        "        print(f'Accuracy with learning rate {lr}: {accuracy}')\n",
        "\n",
        "max_lr = lrs[accuracy_scores.index(max(accuracy_scores))]\n",
        "print(f'Best learning rate: {max_lr}')\n",
        "\n",
        "plt.plot(lrs, accuracy_scores)\n",
        "plt.xscale('log')\n",
        "plt.xlabel('Learning Rate')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.title('Accuracy vs Learning Rate')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "wrqr3SYGN7Gi",
        "outputId": "340bccf8-1737-4a5d-e498-fb07d03f23ed"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10, Loss: 0.010456524789333344\n",
            "Epoch 2/10, Loss: 0.1735287755727768\n",
            "Epoch 3/10, Loss: 0.10254328697919846\n",
            "Epoch 4/10, Loss: 0.040921758860349655\n",
            "Epoch 5/10, Loss: 0.0019759347196668386\n",
            "Epoch 6/10, Loss: 0.014853918924927711\n",
            "Epoch 7/10, Loss: 0.014527494087815285\n",
            "Epoch 8/10, Loss: 0.0010589812882244587\n",
            "Epoch 9/10, Loss: 0.015740927308797836\n",
            "Epoch 10/10, Loss: 0.001231973059475422\n",
            "Accuracy with learning rate 0.3: 0.9812\n",
            "Epoch 1/10, Loss: 0.10758965462446213\n",
            "Epoch 2/10, Loss: 0.027409538626670837\n",
            "Epoch 3/10, Loss: 0.024993738159537315\n",
            "Epoch 4/10, Loss: 0.007521496154367924\n",
            "Epoch 5/10, Loss: 0.03636765480041504\n",
            "Epoch 6/10, Loss: 0.006879545748233795\n",
            "Epoch 7/10, Loss: 0.000429266132414341\n",
            "Epoch 8/10, Loss: 0.029689248651266098\n",
            "Epoch 9/10, Loss: 0.0004519693029578775\n",
            "Epoch 10/10, Loss: 0.0006776389782316983\n",
            "Accuracy with learning rate 0.1: 0.9832\n",
            "Epoch 1/10, Loss: 0.2660369873046875\n",
            "Epoch 2/10, Loss: 0.15318405628204346\n",
            "Epoch 3/10, Loss: 0.019366856664419174\n",
            "Epoch 4/10, Loss: 0.03201494738459587\n",
            "Epoch 5/10, Loss: 0.08283447474241257\n",
            "Epoch 6/10, Loss: 0.06426187604665756\n",
            "Epoch 7/10, Loss: 0.01159716583788395\n",
            "Epoch 8/10, Loss: 0.0014063955750316381\n",
            "Epoch 9/10, Loss: 0.005131630692631006\n",
            "Epoch 10/10, Loss: 0.007707778364419937\n",
            "Accuracy with learning rate 0.03: 0.9862\n",
            "Epoch 1/10, Loss: 0.28381380438804626\n",
            "Epoch 2/10, Loss: 0.34719687700271606\n",
            "Epoch 3/10, Loss: 0.16092433035373688\n",
            "Epoch 4/10, Loss: 0.050037313252687454\n",
            "Epoch 5/10, Loss: 0.10484887659549713\n",
            "Epoch 6/10, Loss: 0.26881712675094604\n",
            "Epoch 7/10, Loss: 0.08753874152898788\n",
            "Epoch 8/10, Loss: 0.06740953028202057\n",
            "Epoch 9/10, Loss: 0.20498330891132355\n",
            "Epoch 10/10, Loss: 0.022675931453704834\n",
            "Accuracy with learning rate 0.01: 0.9779\n",
            "Epoch 1/10, Loss: 0.950824499130249\n",
            "Epoch 2/10, Loss: 0.2639620304107666\n",
            "Epoch 3/10, Loss: 0.31963109970092773\n",
            "Epoch 4/10, Loss: 0.11596772819757462\n",
            "Epoch 5/10, Loss: 0.24506476521492004\n",
            "Epoch 6/10, Loss: 0.06758220493793488\n",
            "Epoch 7/10, Loss: 0.18501989543437958\n",
            "Epoch 8/10, Loss: 0.1798916459083557\n",
            "Epoch 9/10, Loss: 0.054494865238666534\n",
            "Epoch 10/10, Loss: 0.15297462046146393\n",
            "Accuracy with learning rate 0.003: 0.9531\n",
            "Epoch 1/10, Loss: 2.3033907413482666\n",
            "Epoch 2/10, Loss: 2.2649736404418945\n",
            "Epoch 3/10, Loss: 2.0814967155456543\n",
            "Epoch 4/10, Loss: 0.9815869331359863\n",
            "Epoch 5/10, Loss: 0.5780524015426636\n",
            "Epoch 6/10, Loss: 0.3918561041355133\n",
            "Epoch 7/10, Loss: 0.4815886616706848\n",
            "Epoch 8/10, Loss: 0.4567265212535858\n",
            "Epoch 9/10, Loss: 0.20717838406562805\n",
            "Epoch 10/10, Loss: 0.4284094274044037\n",
            "Accuracy with learning rate 0.001: 0.9086\n",
            "Epoch 1/10, Loss: 2.32661509513855\n",
            "Epoch 2/10, Loss: 2.305166244506836\n",
            "Epoch 3/10, Loss: 2.302950859069824\n",
            "Epoch 4/10, Loss: 2.2919836044311523\n",
            "Epoch 5/10, Loss: 2.3014917373657227\n",
            "Epoch 6/10, Loss: 2.2835140228271484\n",
            "Epoch 7/10, Loss: 2.282228946685791\n",
            "Epoch 8/10, Loss: 2.300603151321411\n",
            "Epoch 9/10, Loss: 2.287724018096924\n",
            "Epoch 10/10, Loss: 2.299226999282837\n",
            "Accuracy with learning rate 0.0001: 0.2393\n",
            "Epoch 1/10, Loss: 2.3084146976470947\n",
            "Epoch 2/10, Loss: 2.3092644214630127\n",
            "Epoch 3/10, Loss: 2.3088884353637695\n",
            "Epoch 4/10, Loss: 2.2830162048339844\n",
            "Epoch 5/10, Loss: 2.295437812805176\n",
            "Epoch 6/10, Loss: 2.300684928894043\n",
            "Epoch 7/10, Loss: 2.3038477897644043\n",
            "Epoch 8/10, Loss: 2.3102214336395264\n",
            "Epoch 9/10, Loss: 2.300037384033203\n",
            "Epoch 10/10, Loss: 2.294448137283325\n",
            "Accuracy with learning rate 1e-05: 0.0958\n",
            "Best learning rate: 0.03\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "batch_sizes = [16, 32, 64, 128, 256]\n",
        "accuracy_scores = []\n",
        "\n",
        "for batch_size in batch_sizes:\n",
        "    model = CNN(num_of_blocks=1, stride_conv=1, stride_pool=2, kernel_conv_size=5, kernel_pool_size=2, out_channels=6, in_channels=1)\n",
        "    model.fit(train_x, dig_train_y, epochs=10, lr=max_lr, batch_size=batch_size)\n",
        "    with torch.no_grad():\n",
        "        pred = model.predict(test_x).numpy()\n",
        "        test_y_labels = dig_test_y.numpy()\n",
        "\n",
        "        accuracy = accuracy_score(test_y_labels, pred)\n",
        "        accuracy_scores.append(accuracy)\n",
        "        print(f'Accuracy with batch size {batch_size}: {accuracy}')\n",
        "\n",
        "max_batch_size = batch_sizes[accuracy_scores.index(max(accuracy_scores))]\n",
        "print(f'Best batch size: {max_batch_size}')\n",
        "\n",
        "plt.plot(batch_sizes, accuracy_scores)\n",
        "plt.xlabel('Batch Size')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.title('Accuracy vs Batch Size')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "xGyVof0ON-ji",
        "outputId": "038fe051-c468-4126-9557-ca9359b1e3fa"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10, Loss: 0.49113935232162476\n",
            "Epoch 2/10, Loss: 0.001685256022028625\n",
            "Epoch 3/10, Loss: 0.07587339729070663\n",
            "Epoch 4/10, Loss: 0.05947880446910858\n",
            "Epoch 5/10, Loss: 0.18821115791797638\n",
            "Epoch 6/10, Loss: 0.012414321303367615\n",
            "Epoch 7/10, Loss: 0.001995511818677187\n",
            "Epoch 8/10, Loss: 0.038944095373153687\n",
            "Epoch 9/10, Loss: 0.003802827326580882\n",
            "Epoch 10/10, Loss: 3.250450754421763e-05\n",
            "Accuracy with batch size 16: 0.9886\n",
            "Epoch 1/10, Loss: 0.15696199238300323\n",
            "Epoch 2/10, Loss: 0.04831574112176895\n",
            "Epoch 3/10, Loss: 0.04747753590345383\n",
            "Epoch 4/10, Loss: 0.2782655954360962\n",
            "Epoch 5/10, Loss: 0.09027456492185593\n",
            "Epoch 6/10, Loss: 0.06615189462900162\n",
            "Epoch 7/10, Loss: 0.057934124022722244\n",
            "Epoch 8/10, Loss: 0.009698593989014626\n",
            "Epoch 9/10, Loss: 0.017071135342121124\n",
            "Epoch 10/10, Loss: 0.005321829114109278\n",
            "Accuracy with batch size 32: 0.9861\n",
            "Epoch 1/10, Loss: 0.35735732316970825\n",
            "Epoch 2/10, Loss: 0.1311701089143753\n",
            "Epoch 3/10, Loss: 0.06376238167285919\n",
            "Epoch 4/10, Loss: 0.16255638003349304\n",
            "Epoch 5/10, Loss: 0.07978564500808716\n",
            "Epoch 6/10, Loss: 0.14688722789287567\n",
            "Epoch 7/10, Loss: 0.010708386078476906\n",
            "Epoch 8/10, Loss: 0.06719594448804855\n",
            "Epoch 9/10, Loss: 0.0205653365701437\n",
            "Epoch 10/10, Loss: 0.024618493393063545\n",
            "Accuracy with batch size 64: 0.981\n",
            "Epoch 1/10, Loss: 0.32115840911865234\n",
            "Epoch 2/10, Loss: 0.3104557693004608\n",
            "Epoch 3/10, Loss: 0.21472027897834778\n",
            "Epoch 4/10, Loss: 0.12396251410245895\n",
            "Epoch 5/10, Loss: 0.13883759081363678\n",
            "Epoch 6/10, Loss: 0.042727451771497726\n",
            "Epoch 7/10, Loss: 0.08226104825735092\n",
            "Epoch 8/10, Loss: 0.029103556647896767\n",
            "Epoch 9/10, Loss: 0.08112724125385284\n",
            "Epoch 10/10, Loss: 0.072541743516922\n",
            "Accuracy with batch size 128: 0.9735\n",
            "Epoch 1/10, Loss: 1.2376773357391357\n",
            "Epoch 2/10, Loss: 0.4024648070335388\n",
            "Epoch 3/10, Loss: 0.3359103798866272\n",
            "Epoch 4/10, Loss: 0.21273593604564667\n",
            "Epoch 5/10, Loss: 0.23785504698753357\n",
            "Epoch 6/10, Loss: 0.21502970159053802\n",
            "Epoch 7/10, Loss: 0.2294779270887375\n",
            "Epoch 8/10, Loss: 0.09907636046409607\n",
            "Epoch 9/10, Loss: 0.09402161836624146\n",
            "Epoch 10/10, Loss: 0.10442080348730087\n",
            "Accuracy with batch size 256: 0.9669\n",
            "Best batch size: 16\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "conv_kernel_sizes = [3, 5, 7, 9, 11, 13]\n",
        "accuracy_scores = []\n",
        "\n",
        "for conv_kernel_size in conv_kernel_sizes:\n",
        "    model = CNN(num_of_blocks=1, stride_conv=1, stride_pool=2, kernel_conv_size=conv_kernel_size, kernel_pool_size=2, out_channels=6, in_channels=1)\n",
        "    model.fit(train_x, dig_train_y, epochs=10, lr=max_lr, batch_size=max_batch_size)\n",
        "    with torch.no_grad():\n",
        "        pred = model.predict(test_x).numpy()\n",
        "        test_y_labels = dig_test_y.numpy()\n",
        "\n",
        "        accuracy = accuracy_score(test_y_labels, pred)\n",
        "        accuracy_scores.append(accuracy)\n",
        "        print(f'Accuracy with convolution kernel size {conv_kernel_size}: {accuracy}')\n",
        "\n",
        "max_conv_kernel_size = conv_kernel_sizes[accuracy_scores.index(max(accuracy_scores))]\n",
        "print(f'Best convolution kernel size: {max_conv_kernel_size}')\n",
        "\n",
        "plt.plot(conv_kernel_sizes, accuracy_scores)\n",
        "plt.xlabel('Convolution Kernel Size')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.title('Accuracy vs Convolution Kernel Size')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "0XxXWSlHOCFh",
        "outputId": "5eb46356-40d1-4907-e771-3035bb810f9e"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10, Loss: 0.5720876455307007\n",
            "Epoch 2/10, Loss: 0.0636686310172081\n",
            "Epoch 3/10, Loss: 0.06487354636192322\n",
            "Epoch 4/10, Loss: 0.371027410030365\n",
            "Epoch 5/10, Loss: 0.002073617884889245\n",
            "Epoch 6/10, Loss: 0.0023948131129145622\n",
            "Epoch 7/10, Loss: 0.014465562999248505\n",
            "Epoch 8/10, Loss: 0.0004263281589373946\n",
            "Epoch 9/10, Loss: 0.02304909937083721\n",
            "Epoch 10/10, Loss: 0.005115168169140816\n",
            "Accuracy with convolution kernel size 3: 0.9853\n",
            "Epoch 1/10, Loss: 0.047623660415410995\n",
            "Epoch 2/10, Loss: 0.013816000893712044\n",
            "Epoch 3/10, Loss: 0.021700982004404068\n",
            "Epoch 4/10, Loss: 0.004863652866333723\n",
            "Epoch 5/10, Loss: 0.01325940154492855\n",
            "Epoch 6/10, Loss: 0.0057550049386918545\n",
            "Epoch 7/10, Loss: 0.08416608721017838\n",
            "Epoch 8/10, Loss: 0.014252918772399426\n",
            "Epoch 9/10, Loss: 0.0009204992675222456\n",
            "Epoch 10/10, Loss: 0.006916686426848173\n",
            "Accuracy with convolution kernel size 5: 0.9844\n",
            "Epoch 1/10, Loss: 0.02657342329621315\n",
            "Epoch 2/10, Loss: 0.003240548074245453\n",
            "Epoch 3/10, Loss: 0.01125900074839592\n",
            "Epoch 4/10, Loss: 0.002618012484163046\n",
            "Epoch 5/10, Loss: 0.2113659679889679\n",
            "Epoch 6/10, Loss: 0.06686226278543472\n",
            "Epoch 7/10, Loss: 0.0017217043787240982\n",
            "Epoch 8/10, Loss: 6.79858130752109e-05\n",
            "Epoch 9/10, Loss: 0.0017611997900530696\n",
            "Epoch 10/10, Loss: 0.0005273550050333142\n",
            "Accuracy with convolution kernel size 7: 0.9871\n",
            "Epoch 1/10, Loss: 0.11233364045619965\n",
            "Epoch 2/10, Loss: 0.03364478051662445\n",
            "Epoch 3/10, Loss: 0.006695628631860018\n",
            "Epoch 4/10, Loss: 0.016976330429315567\n",
            "Epoch 5/10, Loss: 0.0014906410360708833\n",
            "Epoch 6/10, Loss: 0.003025480778887868\n",
            "Epoch 7/10, Loss: 0.0004090402217116207\n",
            "Epoch 8/10, Loss: 0.00255923205986619\n",
            "Epoch 9/10, Loss: 0.03618226200342178\n",
            "Epoch 10/10, Loss: 0.006535084452480078\n",
            "Accuracy with convolution kernel size 9: 0.9891\n",
            "Epoch 1/10, Loss: 0.21677693724632263\n",
            "Epoch 2/10, Loss: 0.020549805834889412\n",
            "Epoch 3/10, Loss: 0.005895792040973902\n",
            "Epoch 4/10, Loss: 0.08451342582702637\n",
            "Epoch 5/10, Loss: 0.02275545336306095\n",
            "Epoch 6/10, Loss: 0.00653246883302927\n",
            "Epoch 7/10, Loss: 0.013242185115814209\n",
            "Epoch 8/10, Loss: 0.0025412633549422026\n",
            "Epoch 9/10, Loss: 0.0005821448867209256\n",
            "Epoch 10/10, Loss: 7.338704745052382e-05\n",
            "Accuracy with convolution kernel size 11: 0.9879\n",
            "Epoch 1/10, Loss: 0.03300187364220619\n",
            "Epoch 2/10, Loss: 0.05930992588400841\n",
            "Epoch 3/10, Loss: 0.040489550679922104\n",
            "Epoch 4/10, Loss: 0.09328828752040863\n",
            "Epoch 5/10, Loss: 0.01975095644593239\n",
            "Epoch 6/10, Loss: 0.002247191732749343\n",
            "Epoch 7/10, Loss: 0.003489345544949174\n",
            "Epoch 8/10, Loss: 0.0011601420119404793\n",
            "Epoch 9/10, Loss: 0.02172534167766571\n",
            "Epoch 10/10, Loss: 0.0003846564213745296\n",
            "Accuracy with convolution kernel size 13: 0.9892\n",
            "Best convolution kernel size: 13\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "conv_strides = [1, 2, 3]\n",
        "accuracy_scores = []\n",
        "\n",
        "for conv_stride in conv_strides:\n",
        "    model = CNN(num_of_blocks=1, stride_conv=conv_stride, stride_pool=2, kernel_conv_size=max_conv_kernel_size, kernel_pool_size=2, out_channels=6, in_channels=1)\n",
        "    model.fit(train_x, dig_train_y, epochs=10, lr=max_lr, batch_size=max_batch_size)\n",
        "    with torch.no_grad():\n",
        "        pred = model.predict(test_x).numpy()\n",
        "        test_y_labels = dig_test_y.numpy()\n",
        "\n",
        "        accuracy = accuracy_score(test_y_labels, pred)\n",
        "        accuracy_scores.append(accuracy)\n",
        "        print(f'Accuracy with convolution stride {conv_stride}: {accuracy}')\n",
        "\n",
        "max_conv_stride = conv_strides[accuracy_scores.index(max(accuracy_scores))]\n",
        "print(f'Best convolution stride: {max_conv_stride}')\n",
        "\n",
        "plt.plot(conv_strides, accuracy_scores)\n",
        "plt.xlabel('Convolution Stride')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.title('Accuracy vs Convolution Stride')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "EOzYPI5TOD6J",
        "outputId": "22bb2e15-558e-434b-d274-ecf6cb614226"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10, Loss: 0.66054368019104\n",
            "Epoch 2/10, Loss: 0.046722162514925\n",
            "Epoch 3/10, Loss: 0.0532047301530838\n",
            "Epoch 4/10, Loss: 0.00585078913718462\n",
            "Epoch 5/10, Loss: 0.0320764034986496\n",
            "Epoch 6/10, Loss: 0.3217715322971344\n",
            "Epoch 7/10, Loss: 0.0005602504243142903\n",
            "Epoch 8/10, Loss: 5.3021278290543705e-05\n",
            "Epoch 9/10, Loss: 0.05370188504457474\n",
            "Epoch 10/10, Loss: 0.004795708227902651\n",
            "Accuracy with convolution stride 1: 0.9857\n",
            "Epoch 1/10, Loss: 0.007809611968696117\n",
            "Epoch 2/10, Loss: 0.40390491485595703\n",
            "Epoch 3/10, Loss: 0.015255304053425789\n",
            "Epoch 4/10, Loss: 0.17103591561317444\n",
            "Epoch 5/10, Loss: 0.0070017860271036625\n",
            "Epoch 6/10, Loss: 0.006072972435504198\n",
            "Epoch 7/10, Loss: 0.028938744217157364\n",
            "Epoch 8/10, Loss: 0.044110074639320374\n",
            "Epoch 9/10, Loss: 0.004439153708517551\n",
            "Epoch 10/10, Loss: 0.02811633050441742\n",
            "Accuracy with convolution stride 2: 0.9826\n",
            "Epoch 1/10, Loss: 0.42882442474365234\n",
            "Epoch 2/10, Loss: 0.008581066504120827\n",
            "Epoch 3/10, Loss: 0.01005195640027523\n",
            "Epoch 4/10, Loss: 0.08686250448226929\n",
            "Epoch 5/10, Loss: 0.009053432382643223\n",
            "Epoch 6/10, Loss: 0.05176660418510437\n",
            "Epoch 7/10, Loss: 0.07356083393096924\n",
            "Epoch 8/10, Loss: 0.12244341522455215\n",
            "Epoch 9/10, Loss: 0.055746447294950485\n",
            "Epoch 10/10, Loss: 0.045908309519290924\n",
            "Accuracy with convolution stride 3: 0.9783\n",
            "Best convolution stride: 1\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pool_kernel_sizes = [2, 3, 4, 5, 6, 7]\n",
        "accuracy_scores = []\n",
        "\n",
        "for pool_kernel_size in pool_kernel_sizes:\n",
        "    model = CNN(num_of_blocks=1, stride_conv=max_conv_stride, stride_pool=2, kernel_conv_size=max_conv_kernel_size, kernel_pool_size=pool_kernel_size, out_channels=6, in_channels=1)\n",
        "    model.fit(train_x, dig_train_y, epochs=10, lr=max_lr, batch_size=max_batch_size)\n",
        "    with torch.no_grad():\n",
        "        pred = model.predict(test_x).numpy()\n",
        "        test_y_labels = dig_test_y.numpy()\n",
        "\n",
        "        accuracy = accuracy_score(test_y_labels, pred)\n",
        "        accuracy_scores.append(accuracy)\n",
        "        print(f'Accuracy with pool kernel size {pool_kernel_size}: {accuracy}')\n",
        "\n",
        "max_pool_kernel_size = pool_kernel_sizes[accuracy_scores.index(max(accuracy_scores))]\n",
        "print(f'Best pool kernel size: {max_pool_kernel_size}')\n",
        "\n",
        "plt.plot(pool_kernel_sizes, accuracy_scores)\n",
        "plt.xlabel('Pool Kernel Size')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.title('Accuracy vs Pool Kernel Size')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "cCmyD_QsOGMe",
        "outputId": "671dd707-bfd6-49b8-fb96-c9b4862c6d10"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10, Loss: 0.07125524431467056\n",
            "Epoch 2/10, Loss: 0.14873653650283813\n",
            "Epoch 3/10, Loss: 0.10481112450361252\n",
            "Epoch 4/10, Loss: 0.025621501728892326\n",
            "Epoch 5/10, Loss: 0.013828595168888569\n",
            "Epoch 6/10, Loss: 0.014503106474876404\n",
            "Epoch 7/10, Loss: 0.0075899166986346245\n",
            "Epoch 8/10, Loss: 0.0004904713714495301\n",
            "Epoch 9/10, Loss: 0.0001637309032958001\n",
            "Epoch 10/10, Loss: 0.004165598191320896\n",
            "Accuracy with pool kernel size 2: 0.9848\n",
            "Epoch 1/10, Loss: 0.08564959466457367\n",
            "Epoch 2/10, Loss: 0.020056214183568954\n",
            "Epoch 3/10, Loss: 0.002034421544522047\n",
            "Epoch 4/10, Loss: 0.040631212294101715\n",
            "Epoch 5/10, Loss: 0.14928394556045532\n",
            "Epoch 6/10, Loss: 0.0020069447346031666\n",
            "Epoch 7/10, Loss: 0.012390091083943844\n",
            "Epoch 8/10, Loss: 0.0011958552058786154\n",
            "Epoch 9/10, Loss: 0.02435097098350525\n",
            "Epoch 10/10, Loss: 0.0324193499982357\n",
            "Accuracy with pool kernel size 3: 0.9873\n",
            "Epoch 1/10, Loss: 0.004106759559363127\n",
            "Epoch 2/10, Loss: 0.002791522303596139\n",
            "Epoch 3/10, Loss: 0.008871379308402538\n",
            "Epoch 4/10, Loss: 0.0324040949344635\n",
            "Epoch 5/10, Loss: 0.0015308724250644445\n",
            "Epoch 6/10, Loss: 0.00031037666485644877\n",
            "Epoch 7/10, Loss: 0.005342688877135515\n",
            "Epoch 8/10, Loss: 6.379806291079149e-05\n",
            "Epoch 9/10, Loss: 0.003992889542132616\n",
            "Epoch 10/10, Loss: 0.015187791548669338\n",
            "Accuracy with pool kernel size 4: 0.9898\n",
            "Epoch 1/10, Loss: 0.1873757392168045\n",
            "Epoch 2/10, Loss: 0.0022898700553923845\n",
            "Epoch 3/10, Loss: 0.11931336671113968\n",
            "Epoch 4/10, Loss: 0.0029735113494098186\n",
            "Epoch 5/10, Loss: 0.26317209005355835\n",
            "Epoch 6/10, Loss: 0.03720748424530029\n",
            "Epoch 7/10, Loss: 0.009082003496587276\n",
            "Epoch 8/10, Loss: 0.13829277455806732\n",
            "Epoch 9/10, Loss: 0.007862643338739872\n",
            "Epoch 10/10, Loss: 0.14795850217342377\n",
            "Accuracy with pool kernel size 5: 0.986\n",
            "Epoch 1/10, Loss: 0.05523834004998207\n",
            "Epoch 2/10, Loss: 0.0630263164639473\n",
            "Epoch 3/10, Loss: 0.007027684710919857\n",
            "Epoch 4/10, Loss: 0.0010028709657490253\n",
            "Epoch 5/10, Loss: 0.010954397730529308\n",
            "Epoch 6/10, Loss: 0.027703912928700447\n",
            "Epoch 7/10, Loss: 0.009939154610037804\n",
            "Epoch 8/10, Loss: 0.04970862716436386\n",
            "Epoch 9/10, Loss: 0.04368267580866814\n",
            "Epoch 10/10, Loss: 0.0011684780474752188\n",
            "Accuracy with pool kernel size 6: 0.9866\n",
            "Epoch 1/10, Loss: 0.0021374241914600134\n",
            "Epoch 2/10, Loss: 0.39524686336517334\n",
            "Epoch 3/10, Loss: 0.01398490834981203\n",
            "Epoch 4/10, Loss: 0.008382609114050865\n",
            "Epoch 5/10, Loss: 0.015487193129956722\n",
            "Epoch 6/10, Loss: 0.0038873853627592325\n",
            "Epoch 7/10, Loss: 0.0007737455889582634\n",
            "Epoch 8/10, Loss: 0.016470951959490776\n",
            "Epoch 9/10, Loss: 0.00018370462930761278\n",
            "Epoch 10/10, Loss: 0.013528900220990181\n",
            "Accuracy with pool kernel size 7: 0.9841\n",
            "Best pool kernel size: 4\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pool_strides = [1, 2, 3]\n",
        "accuracy_scores = []\n",
        "\n",
        "for pool_stride in pool_strides:\n",
        "    model = CNN(num_of_blocks=1, stride_conv=max_conv_stride, stride_pool=pool_stride, kernel_conv_size=max_conv_kernel_size, kernel_pool_size=max_pool_kernel_size, out_channels=6, in_channels=1)\n",
        "    model.fit(train_x, dig_train_y, epochs=10, lr=max_lr, batch_size=max_batch_size)\n",
        "    with torch.no_grad():\n",
        "        pred = model.predict(test_x).numpy()\n",
        "        test_y_labels = dig_test_y.numpy()\n",
        "\n",
        "        accuracy = accuracy_score(test_y_labels, pred)\n",
        "        accuracy_scores.append(accuracy)\n",
        "        print(f'Accuracy with pool stride {pool_stride}: {accuracy}')\n",
        "\n",
        "max_pool_stride = pool_strides[accuracy_scores.index(max(accuracy_scores))]\n",
        "print(f'Best pool stride: {max_pool_stride}')\n",
        "\n",
        "plt.plot(pool_strides, accuracy_scores)\n",
        "plt.xlabel('Pool Stride')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.title('Accuracy vs Pool Stride')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Bx8lmfVKOGvk",
        "outputId": "772f260e-e13b-4833-cec3-e61310523aaf"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10, Loss: 0.6066743731498718\n",
            "Epoch 2/10, Loss: 0.012794534675776958\n",
            "Epoch 3/10, Loss: 0.1707184612751007\n",
            "Epoch 4/10, Loss: 0.00023811263963580132\n",
            "Epoch 5/10, Loss: 0.6449372172355652\n",
            "Epoch 6/10, Loss: 0.009461916983127594\n",
            "Epoch 7/10, Loss: 1.6025604054448195e-05\n",
            "Epoch 8/10, Loss: 0.0038167103193700314\n",
            "Epoch 9/10, Loss: 0.008849959820508957\n",
            "Epoch 10/10, Loss: 0.0005077706882730126\n",
            "Accuracy with pool stride 1: 0.9846\n",
            "Epoch 1/10, Loss: 0.10479964315891266\n",
            "Epoch 2/10, Loss: 0.04657535254955292\n",
            "Epoch 3/10, Loss: 0.06462137401103973\n",
            "Epoch 4/10, Loss: 0.1415562629699707\n",
            "Epoch 5/10, Loss: 0.03766816109418869\n",
            "Epoch 6/10, Loss: 0.002786255208775401\n",
            "Epoch 7/10, Loss: 0.0005146138137206435\n",
            "Epoch 8/10, Loss: 0.000492483435664326\n",
            "Epoch 9/10, Loss: 0.19010722637176514\n",
            "Epoch 10/10, Loss: 6.27528497716412e-05\n",
            "Accuracy with pool stride 2: 0.9876\n",
            "Epoch 1/10, Loss: 0.06391983479261398\n",
            "Epoch 2/10, Loss: 0.015044603496789932\n",
            "Epoch 3/10, Loss: 0.18710288405418396\n",
            "Epoch 4/10, Loss: 0.00023997125390451401\n",
            "Epoch 5/10, Loss: 0.004643792752176523\n",
            "Epoch 6/10, Loss: 0.661003589630127\n",
            "Epoch 7/10, Loss: 0.05821002274751663\n",
            "Epoch 8/10, Loss: 0.0017977998359128833\n",
            "Epoch 9/10, Loss: 0.0004697347176261246\n",
            "Epoch 10/10, Loss: 0.006701990962028503\n",
            "Accuracy with pool stride 3: 0.9865\n",
            "Best pool stride: 2\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay\n",
        "\n",
        "def draw_confusion_matrix(y_pred, y_true):\n",
        "    with torch.no_grad():\n",
        "        matrix = confusion_matrix(y_true, y_pred)\n",
        "        ConfusionMatrixDisplay(matrix, display_labels=range(10)).plot(include_values=True, cmap='Blues')\n",
        "\n",
        "print(f'blocks_num={1}, conv_stride={max_conv_stride}, pool_stride={max_pool_stride}, conv_kernel_size={max_conv_kernel_size}, pool_kernel_size={max_pool_kernel_size}')\n",
        "model = CNN(1, max_conv_stride, max_pool_stride, max_conv_kernel_size, max_pool_kernel_size)\n",
        "\n",
        "for i in range(10):\n",
        "    print(f'Iteration: {i+1}')\n",
        "    model.fit(train_x, dig_train_y, 10, max_lr, max_batch_size)\n",
        "\n",
        "    pred = model.predict(test_x).numpy()\n",
        "    test_y_labels = dig_test_y.numpy()\n",
        "\n",
        "    accuracy = accuracy_score(test_y_labels, pred)\n",
        "    print(f'Accuracy: {accuracy}')\n",
        "\n",
        "    if accuracy > 0.9:\n",
        "      break\n",
        "\n",
        "with torch.no_grad():\n",
        "    pred = model.predict(test_x).numpy()\n",
        "    draw_confusion_matrix(pred, dig_test_y.numpy())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 675
        },
        "id": "di7lPGuJOJZ5",
        "outputId": "adf4ba00-ca7b-48a5-a2d3-58998664db72"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "blocks_num=1, conv_stride=1, pool_stride=2, conv_kernel_size=13, pool_kernel_size=4\n",
            "Iteration: 1\n",
            "Epoch 1/10, Loss: 0.12237280607223511\n",
            "Epoch 2/10, Loss: 0.032483987510204315\n",
            "Epoch 3/10, Loss: 0.003924300894141197\n",
            "Epoch 4/10, Loss: 0.0036307405680418015\n",
            "Epoch 5/10, Loss: 0.05811893194913864\n",
            "Epoch 6/10, Loss: 0.15744906663894653\n",
            "Epoch 7/10, Loss: 0.01622892916202545\n",
            "Epoch 8/10, Loss: 0.039552852511405945\n",
            "Epoch 9/10, Loss: 0.002170196734368801\n",
            "Epoch 10/10, Loss: 0.0013565727276727557\n",
            "Accuracy: 0.9885\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 8: Test different numbers of blocks\n",
        "num_blocks = [1, 2, 3, 4, 5]\n",
        "accuracy_scores = []\n",
        "\n",
        "for num_block in num_blocks:\n",
        "   model = CNN(num_of_blocks=num_block, stride_conv=max_conv_stride, stride_pool=pool_stride, kernel_conv_size=max_conv_kernel_size, kernel_pool_size=max_pool_kernel_size, out_channels=6, in_channels=1)\n",
        "   model.fit(train_x, dig_train_y, epochs=10, lr=max_lr, batch_size=max_batch_size)\n",
        "   with torch.no_grad():\n",
        "        pred = model.predict(test_x).numpy()\n",
        "        test_y_labels = dig_test_y.numpy()\n",
        "\n",
        "        accuracy = accuracy_score(test_y_labels, pred)\n",
        "        accuracy_scores.append(accuracy)\n",
        "        print(f'Accuracy with pool stride {pool_stride}: {accuracy}')\n",
        "\n",
        "max_num_blocks = num_blocks[accuracy_scores.index(max(accuracy_scores))]\n",
        "print(f'Best number of blocks: {max_num_blocks}')\n",
        "\n",
        "plt.plot(num_blocks, accuracy_scores)\n",
        "plt.xlabel('Number of Blocks')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.title('Accuracy vs Number of Blocks')\n",
        "plt.show()\n",
        "\n",
        "print(f'Best Hyperparameters: blocks_num={max_num_blocks}, conv_stride={max_conv_stride}, pool_stride={max_pool_stride}, conv_kernel_size={max_conv_kernel_size}, pool_kernel_size={max_pool_kernel_size}')\n",
        "\n",
        "model = CNN(max_num_blocks, max_conv_stride, max_pool_stride, max_conv_kernel_size, max_pool_kernel_size, out_channels=16, in_channels=3)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        },
        "id": "b-Rgv2FZTHV9",
        "outputId": "e3e5c3d3-e581-416a-de71-b6c63a65ffa5"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "CNN.fit() missing 1 required positional argument: 'Y'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-15-4902e620fb1c>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mnum_block\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mnum_blocks\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCNN\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_of_blocks\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnum_block\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstride_conv\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmax_conv_stride\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstride_pool\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmax_pool_stride\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkernel_conv_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmax_conv_kernel_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkernel_pool_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmax_pool_kernel_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout_channels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0min_channels\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m     \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_loader\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmax_lr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m     \u001b[0my_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0my\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0m_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mtest_loader\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m     \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_loader\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: CNN.fit() missing 1 required positional argument: 'Y'"
          ]
        }
      ]
    }
  ]
}